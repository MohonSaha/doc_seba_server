generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id                 String            @id @default(uuid())
  email              String            @unique
  mobile             String
  password           String
  role               Role
  needPasswordChange Boolean           @default(true)
  status             UserStatus        @default(PENDING)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  DiagnosticCenter   DiagnosticCenter?
  admin              Admin?
  doctor             Doctor?
  patient            Patient?

  @@map("users")
}

model DiagnosticCenter {
  diagnosticID   String   @id @default(uuid())
  dsID           String   @unique
  name           String?
  contactInfo    String?
  altContactInfo String?
  openingHours   String?
  websiteUrl     String?
  description    String?
  rating         Int?
  logo           String?
  bannerImg      String?
  isDeleted      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  email          String   @unique
  user           User     @relation(fields: [email], references: [email])
  addressId      String?
  address        Address? @relation(fields: [addressId], references: [id])

  @@map("diagnosticCenters")
}

model Address {
  id                String             @id @default(uuid())
  division          String
  district          String
  upozila           String
  diagnosticCenters DiagnosticCenter[]

  @@map("addresses")
}

model Admin {
  id            String   @id @default(uuid())
  dsID          String   @unique
  name          String?
  email         String   @unique
  profilePhoto  String?
  contactNumber String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [email], references: [email])

  @@map("admins")
}

model Doctor {
  id                  String   @id @default(uuid())
  dsID                String   @unique
  name                String?
  email               String   @unique
  profilePhoto        String?
  contactNumber       String?
  address             String?
  registrationNo      String?
  experience          Int      @default(0)
  gender              Gender?
  appointmentFee      Int?
  qualification       String?
  currentWorkignPlace String?
  designation         String?
  averageRating       Float    @default(0.0)
  isDeleted           Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [email], references: [email])

  @@map("doctors")
}


model Patient {
  id            String   @id @unique @default(uuid())
  dsID          String   @unique
  email         String   @unique
  name          String?
  profilePhoto  String?
  contactNumber String?
  address       String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User               @relation(references: [email], fields: [email])
  @@map("patients")
}

enum UserStatus {
  PENDING
  REVIEWING
  ACTIVATE
  BLOCKED
}

enum Role {
  SUPER_ADMIN
  ADMIN
  DiagnosticCenter
  DOCTOR
  PATIENT
}

enum Gender {
  MALE
  FEMALE
}


enum BloodGroup {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
}

enum MaritalStatus {
  UNMARRIED
  MARRIED
  DIVORCED
  WIDOWED
}

